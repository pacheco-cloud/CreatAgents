version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: agente-postgres
    environment:
      POSTGRES_DB: agente_db
      POSTGRES_USER: agente_user
      POSTGRES_PASSWORD: agente_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agente_user -d agente_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: agente-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # User Settings Service
  user-settings-service:
    build: 
      context: ./apps/services/user-settings-service
      dockerfile: Dockerfile
    container_name: agente-user-settings
    environment:
      - DATABASE_URL=postgresql://agente_user:agente_pass@postgres:5432/agente_db
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
    ports:
      - "8003:8003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Calendar Service
  calendar-service:
    build:
      context: ./apps/services/calendar-service
      dockerfile: Dockerfile
    container_name: agente-calendar
    environment:
      - DATABASE_URL=postgresql://agente_user:agente_pass@postgres:5432/agente_db
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Orchestrator Agent
  orchestrator-agent:
    build:
      context: ./apps/services/orchestrator-agent
      dockerfile: Dockerfile
    container_name: agente-orchestrator
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DATABASE_URL=postgresql://agente_user:agente_pass@postgres:5432/agente_db
      - USER_SETTINGS_URL=http://user-settings-service:8003
      - CALENDAR_URL=http://calendar-service:8002
      - ENVIRONMENT=production
    ports:
      - "8001:8001"
    depends_on:
      user-settings-service:
        condition: service_healthy
      calendar-service:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Tool Factory Service
  tool-factory-service:
    build:
      context: ./apps/services/tool-factory-service
      dockerfile: Dockerfile
    container_name: agente-tool-factory
    environment:
      - DATABASE_URL=postgresql://agente_user:agente_pass@postgres:5432/agente_db
      - ENVIRONMENT=production
    ports:
      - "8004:8004"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./apps/services/api-gateway
      dockerfile: Dockerfile
    container_name: agente-api-gateway
    environment:
      - ORCHESTRATOR_URL=http://orchestrator-agent:8001
      - CALENDAR_URL=http://calendar-service:8002
      - SETTINGS_URL=http://user-settings-service:8003
      - TOOL_FACTORY_URL=http://tool-factory-service:8004
      - ENVIRONMENT=production
    ports:
      - "8000:8000"
    depends_on:
      orchestrator-agent:
        condition: service_healthy
      user-settings-service:
        condition: service_healthy
      calendar-service:
        condition: service_healthy
      tool-factory-service:
        condition: service_healthy
    networks:
      - backend
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Next.js
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=http://localhost:8000
    container_name: agente-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (opcional para produção)
  nginx:
    image: nginx:alpine
    container_name: agente-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - api-gateway
    networks:
      - frontend
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge