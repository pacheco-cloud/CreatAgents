# migrate_to_postgres.py - Script para migrar dados existentes para PostgreSQL

import sys
import os
import json
from datetime import datetime
from sqlalchemy import text

# Adicionar caminho do servi√ßo
sys.path.append(os.path.join(os.path.dirname(__file__), 'apps', 'services', 'user-settings-service'))

try:
    from database import SessionLocal, AgentModel, create_tables, test_connection, diagnose_connection
    print("‚úÖ M√≥dulos de banco importados com sucesso!")
except ImportError as e:
    print(f"‚ùå Erro ao importar m√≥dulos: {e}")
    print("üìù Certifique-se de que:")
    print("   1. Est√° na pasta raiz do projeto")
    print("   2. Instalou as depend√™ncias: pip install -r requirements.txt")
    print("   3. O arquivo database.py existe em apps/services/user-settings-service/")
    sys.exit(1)

# Dados padr√£o que estavam em mem√≥ria (do seu c√≥digo original)
DEFAULT_AGENTS_DATA = [
    {
        "id": 1,
        "name": "Calend√°rio Pessoal",
        "type": "Pessoal",
        "isDefault": True,
        "systemPrompt": "Voc√™ √© um assistente de agenda pessoal. Ajude com compromissos pessoais, eventos familiares e atividades de lazer.",
        "tools": [{
            "name": "consultar_agenda_pessoal",
            "description": "Consulta eventos na agenda pessoal do usu√°rio",
            "apiEndpoint": "/api/calendar/personal",
            "parameters": [
                {"name": "data_inicio", "type": "data"},
                {"name": "data_fim", "type": "data"}
            ]
        }]
    },
    {
        "id": 2,
        "name": "Calend√°rio Profissional",
        "type": "Profissional",
        "isDefault": True,
        "systemPrompt": "Voc√™ √© um assistente de agenda profissional. Ajude com reuni√µes, projetos e compromissos de trabalho.",
        "tools": [{
            "name": "consultar_agenda_profissional",
            "description": "Consulta eventos na agenda profissional do usu√°rio",
            "apiEndpoint": "/api/calendar/professional",
            "parameters": [
                {"name": "data_inicio", "type": "data"},
                {"name": "data_fim", "type": "data"}
            ]
        }]
    }
]

def load_existing_data():
    """Carrega dados existentes de arquivo JSON se existir"""
    json_file = "agents_backup.json"
    
    if os.path.exists(json_file):
        print(f"üìÑ Encontrado arquivo de backup: {json_file}")
        try:
            with open(json_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            print(f"‚úÖ Carregados {len(data)} agentes do backup")
            return data
        except Exception as e:
            print(f"‚ùå Erro ao ler backup: {e}")
    
    return None

def backup_current_data():
    """Faz backup dos dados atuais do banco (se existirem)"""
    print("\nüíæ Fazendo backup dos dados existentes...")
    
    db = SessionLocal()
    try:
        agents = db.query(AgentModel).all()
        if agents:
            backup_data = []
            for agent in agents:
                backup_data.append({
                    "id": agent.id,
                    "name": agent.name,
                    "type": agent.type,
                    "isDefault": agent.is_default,
                    "systemPrompt": agent.system_prompt,
                    "tools": agent.tools or [],
                    "created_at": agent.created_at.isoformat() if agent.created_at else None,
                    "updated_at": agent.updated_at.isoformat() if agent.updated_at else None
                })
            
            backup_file = f"agents_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(backup_file, 'w', encoding='utf-8') as f:
                json.dump(backup_data, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ Backup salvo em: {backup_file}")
            return True
        else:
            print("‚ÑπÔ∏è  Nenhum dado existente para fazer backup")
            return True
            
    except Exception as e:
        print(f"‚ùå Erro ao fazer backup: {e}")
        return False
    finally:
        db.close()

def migrate_data(data_source="default"):
    """Migra dados para PostgreSQL"""
    print(f"\nüöÄ Iniciando migra√ß√£o de dados ({data_source})...")
    
    db = SessionLocal()
    try:
        # Determinar fonte dos dados
        if data_source == "default":
            agents_data = DEFAULT_AGENTS_DATA
            print("üìã Usando dados padr√£o do sistema")
        elif data_source == "backup":
            agents_data = load_existing_data()
            if not agents_data:
                print("‚ùå Nenhum backup encontrado, usando dados padr√£o")
                agents_data = DEFAULT_AGENTS_DATA
        else:
            print("‚ùå Fonte de dados inv√°lida")
            return False
        
        # Verificar se j√° existem dados
        existing_count = db.query(AgentModel).count()
        if existing_count > 0:
            print(f"‚ö†Ô∏è  J√° existem {existing_count} agentes no banco")
            overwrite = input("Deseja sobrescrever? (y/n): ").lower().strip()
            if overwrite not in ['y', 'yes', 's', 'sim']:
                print("‚ùå Migra√ß√£o cancelada pelo usu√°rio")
                return False
            
            # Fazer backup antes de sobrescrever
            backup_current_data()
            
            # Limpar dados existentes
            db.query(AgentModel).delete()
            db.commit()
            print("üóëÔ∏è  Dados existentes removidos")
        
        # Inserir novos dados
        migrated_count = 0
        for agent_data in agents_data:
            try:
                # Converter dados para o modelo do banco
                db_agent = AgentModel(
                    name=agent_data["name"],
                    type=agent_data["type"],
                    system_prompt=agent_data["systemPrompt"],
                    tools=agent_data["tools"],
                    is_default=agent_data.get("isDefault", False)
                )
                
                db.add(db_agent)
                migrated_count += 1
                
            except Exception as e:
                print(f"‚ùå Erro ao migrar agente '{agent_data.get('name', 'Desconhecido')}': {e}")
                continue
        
        # Salvar todas as altera√ß√µes
        db.commit()
        print(f"‚úÖ {migrated_count} agentes migrados com sucesso!")
        
        # Verificar dados migrados
        total_agents = db.query(AgentModel).count()
        print(f"üìä Total de agentes no banco: {total_agents}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante a migra√ß√£o: {e}")
        db.rollback()
        return False
    finally:
        db.close()

def verify_migration():
    """Verifica se a migra√ß√£o foi bem-sucedida"""
    print("\nüîç Verificando migra√ß√£o...")
    
    db = SessionLocal()
    try:
        agents = db.query(AgentModel).all()
        
        print(f"üìä Agentes encontrados: {len(agents)}")
        for agent in agents:
            print(f"   ‚úì {agent.name} ({agent.type})")
            if agent.tools:
                print(f"     - {len(agent.tools)} ferramenta(s) configurada(s)")
        
        # Verificar integridade dos dados
        issues = []
        for agent in agents:
            if not agent.name or not agent.name.strip():
                issues.append(f"Agente ID {agent.id} sem nome")
            if agent.type not in ["Pessoal", "Profissional"]:
                issues.append(f"Agente '{agent.name}' com tipo inv√°lido: {agent.type}")
            if not agent.system_prompt or not agent.system_prompt.strip():
                issues.append(f"Agente '{agent.name}' sem system prompt")
        
        if issues:
            print("\n‚ö†Ô∏è  Problemas encontrados:")
            for issue in issues:
                print(f"   - {issue}")
            return False
        else:
            print("\n‚úÖ Migra√ß√£o verificada com sucesso!")
            return True
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar migra√ß√£o: {e}")
        return False
    finally:
        db.close()

def check_postgresql_status():
    """Verifica o status do PostgreSQL no macOS"""
    print("\nüîç Verificando status do PostgreSQL...")
    
    try:
        import subprocess
        
        # Verificar se PostgreSQL est√° rodando (macOS com Homebrew)
        result = subprocess.run(['brew', 'services', 'list'], 
                              capture_output=True, text=True, timeout=10)
        
        if 'postgresql' in result.stdout:
            if 'started' in result.stdout:
                print("‚úÖ PostgreSQL est√° rodando via Homebrew")
                return True
            else:
                print("‚ùå PostgreSQL est√° instalado mas n√£o est√° rodando")
                print("üìù Execute: brew services start postgresql@15")
                return False
        else:
            print("‚ùå PostgreSQL n√£o encontrado via Homebrew")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ö†Ô∏è  Timeout ao verificar servi√ßos")
        return False
    except FileNotFoundError:
        print("‚ö†Ô∏è  Homebrew n√£o encontrado")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao verificar status: {e}")
        return False

def main():
    """Fun√ß√£o principal da migra√ß√£o"""
    print("üîÑ MIGRA√á√ÉO PARA POSTGRESQL")
    print("=" * 40)
    
    # Verificar se PostgreSQL est√° rodando
    print("\n0Ô∏è‚É£ Verificando PostgreSQL...")
    if not check_postgresql_status():
        print("üìù Iniciando PostgreSQL...")
        try:
            import subprocess
            subprocess.run(['brew', 'services', 'start', 'postgresql@15'], 
                         capture_output=True, timeout=15)
            print("‚úÖ PostgreSQL iniciado!")
        except:
            print("‚ùå N√£o foi poss√≠vel iniciar PostgreSQL automaticamente")
            print("üìù Execute manualmente: brew services start postgresql@15")
            return
    
    # Verificar conex√£o
    print("\n1Ô∏è‚É£ Verificando conex√£o com PostgreSQL...")
    if not test_connection():
        print("üîç Executando diagn√≥stico...")
        if not diagnose_connection():
            print("‚ùå Falha na conex√£o. Verifique a configura√ß√£o do PostgreSQL")
            print("\nüîß Passos para resolver:")
            print("1. Instalar PostgreSQL: brew install postgresql@15")
            print("2. Iniciar servi√ßo: brew services start postgresql@15")
            print("3. Criar usu√°rio e banco: Execute o script setup_postgres.sh")
            return
    
    # Criar tabelas
    print("\n2Ô∏è‚É£ Criando estrutura do banco...")
    if not create_tables():
        print("‚ùå Erro ao criar tabelas")
        return
    
    # Escolher fonte dos dados
    print("\n3Ô∏è‚É£ Escolha a fonte dos dados:")
    print("1. Dados padr√£o do sistema (recomendado)")
    print("2. Arquivo de backup (se existir)")
    
    choice = input("\nEscolha (1 ou 2): ").strip()
    
    data_source = "default" if choice == "1" else "backup"
    
    # Executar migra√ß√£o
    print(f"\n4Ô∏è‚É£ Executando migra√ß√£o...")
    if migrate_data(data_source):
        # Verificar migra√ß√£o
        print("\n5Ô∏è‚É£ Verificando migra√ß√£o...")
        if verify_migration():
            print("\nüéâ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!")
            print("\nüìù Pr√≥ximos passos:")
            print("1. Execute o servi√ßo: python apps/services/user-settings-service/main.py")
            print("2. Teste a API: python test_database.py")
            print("3. Acesse http://localhost:3000/settings para ver os agentes")
        else:
            print("\n‚ùå Migra√ß√£o com problemas. Verifique os dados.")
    else:
        print("\n‚ùå Falha na migra√ß√£o.")

if __name__ == "__main__":
    main()